using System;
using System.Collections.Generic;
using System.Text;

namespace 桥接模式
{
    /// <summary>
    /// 一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。
    /// </summary>
    public class Client
    {
        //处理多维度变化的设计模式——桥接模式。取代多层继承。
        //在正式介绍桥接模式之前，我先跟大家谈谈两种常见文具的区别，它们是毛笔和蜡笔。
        //假如我们需要大中小3种型号的画笔，能够绘制12种不同的颜色，如果使用蜡笔，需要准备3×12 = 36支，
        //但如果使用毛笔的话，只需要提供3种型号的毛笔，外加12个颜料盒即可，涉及到的对象个数仅为 3 + 12 = 15，远小于36，
        //却能实现与36支蜡笔同样的功能。如果增加一种新型号的画笔，并且也需要具有12种颜色，对应的蜡笔需增加12支，而毛笔只需增加一支。
        //为什么会这样呢？通过分析我们可以得知：
        //在蜡笔中，颜色和型号两个不同的变化维度（即两个不同的变化原因）融合在一起（颜色和型号是一体的），
        //无论是对颜色进行扩展还是对型号进行扩展都势必会影响另一个维度；
        //但在毛笔中，颜色和型号实现了分离，增加新的颜色或者型号对另一方都没有任何影响。
        //如果使用软件工程中的术语，我们可以认为在蜡笔中颜色和型号之间存在较强的耦合性，而毛笔很好地将二者解耦，使用起来非常灵活，扩展也更为方便。
        //在软件开发中，我们也提供了一种设计模式来处理与画笔类似的具有多变化维度的情况，即本章将要介绍的桥接模式。

        public void test()
        {
            var bigpen = new BigPen();
            var gray = new Gray();
            bigpen.SetColor(gray);

            bigpen.Write();

            var black = new Black();
            bigpen.SetColor(black);

            bigpen.Write();

        }
    }
}
